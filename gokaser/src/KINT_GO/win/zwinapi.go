// mksyscall_windows.pl winapi.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package win

import "unsafe"
import "syscall"

var (
	modshell32 = syscall.NewLazyDLL("shell32.dll")
	modkernel32 = syscall.NewLazyDLL("kernel32.dll")
	moduser32 = syscall.NewLazyDLL("user32.dll")

	procSHGetFolderLocation = modshell32.NewProc("SHGetFolderLocation")
	procSHGetPathFromIDList = modshell32.NewProc("SHGetPathFromIDList")
	procSHGetSpecialFolderLocation = modshell32.NewProc("SHGetSpecialFolderLocation")
	procSHGetKnownFolderIDList = modkernel32.NewProc("SHGetKnownFolderIDList")
	procCreateMutexW = modkernel32.NewProc("CreateMutexW")
	procEnumWindows = modkernel32.NewProc("EnumWindows")
	procSetForegroundWindow = modkernel32.NewProc("SetForegroundWindow")
	procGetClassName = modkernel32.NewProc("GetClassName")
	procGetModuleHandleW = modkernel32.NewProc("GetModuleHandleW")
	procRegisterClassExW = moduser32.NewProc("RegisterClassExW")
	procCreateWindowExW = moduser32.NewProc("CreateWindowExW")
	procDefWindowProcW = moduser32.NewProc("DefWindowProcW")
	procDestroyWindow = moduser32.NewProc("DestroyWindow")
	procPostQuitMessage = moduser32.NewProc("PostQuitMessage")
	procShowWindow = moduser32.NewProc("ShowWindow")
	procUpdateWindow = moduser32.NewProc("UpdateWindow")
	procGetMessageW = moduser32.NewProc("GetMessageW")
	procTranslateMessage = moduser32.NewProc("TranslateMessage")
	procDispatchMessageW = moduser32.NewProc("DispatchMessageW")
	procLoadIconW = moduser32.NewProc("LoadIconW")
	procLoadCursorW = moduser32.NewProc("LoadCursorW")
	procSetCursor = moduser32.NewProc("SetCursor")
	procSendMessageW = moduser32.NewProc("SendMessageW")
	procPostMessageW = moduser32.NewProc("PostMessageW")

)

func SHGetFolderLocation(hOwner syscall.Handle, nFolder int, hToken syscall.Handle, dwReserved uint32, ppidl *uintptr) (hResult uint) {
	r0, _, _ := syscall.Syscall6(procSHGetFolderLocation.Addr(), 5, uintptr(hOwner), uintptr(nFolder), uintptr(hToken), uintptr(dwReserved), uintptr(unsafe.Pointer(ppidl)), 0)
	hResult = uint(r0)
	return
}

func SHGetPathFromIDList(pid uintptr, AppDataPath *uint16) (bResult bool) {
	r0, _, _ := syscall.Syscall(procSHGetPathFromIDList.Addr(), 2, uintptr(pid), uintptr(unsafe.Pointer(AppDataPath)), 0)
	bResult = bool(r0 != 0)
	return
}

func SHGetSpecialFolderLocation(hOwner syscall.Handle, nFolder int, ppidl *uintptr) (hResult uint) {
	r0, _, _ := syscall.Syscall(procSHGetSpecialFolderLocation.Addr(), 3, uintptr(hOwner), uintptr(nFolder), uintptr(unsafe.Pointer(ppidl)))
	hResult = uint(r0)
	return
}

func SHGetKnownFolderIDList(rfid int, dwFlags uint32, hToken syscall.Handle, pidl uintptr) (hResult uint) {
	r0, _, _ := syscall.Syscall6(procSHGetKnownFolderIDList.Addr(), 4, uintptr(rfid), uintptr(dwFlags), uintptr(hToken), uintptr(pidl), 0, 0)
	hResult = uint(r0)
	return
}

func CreateMutex(lpSecurityAttributes uintptr, bInitalOwner bool, mutexName *uint16) (handle Handle, err error) {
	var _p0 uint32
	if bInitalOwner {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r0, _, e1 := syscall.Syscall(procCreateMutexW.Addr(), 3, uintptr(lpSecurityAttributes), uintptr(_p0), uintptr(unsafe.Pointer(mutexName)))
	handle = Handle(r0)
	if handle == InvalidHandle {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func EnumWindows(callback uintptr, lpparm uintptr) (success bool) {
	r0, _, _ := syscall.Syscall(procEnumWindows.Addr(), 2, uintptr(callback), uintptr(lpparm), 0)
	success = bool(r0 != 0)
	return
}

func SetForegroundWindow(hwnd syscall.Handle) (success bool) {
	r0, _, _ := syscall.Syscall(procSetForegroundWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	success = bool(r0 != 0)
	return
}

func GetClassName(hwnd syscall.Handle, classname *uint16, bufflen uint) (iResult uint) {
	r0, _, _ := syscall.Syscall(procGetClassName.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(classname)), uintptr(bufflen))
	iResult = uint(r0)
	return
}

func GetModuleHandle(modname *uint16) (handle syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(modname)), 0, 0)
	handle = syscall.Handle(r0)
	if handle == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func RegisterClassEx(wndclass *Wndclassex) (atom uint16, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(wndclass)), 0, 0)
	atom = uint16(r0)
	if atom == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exstyle), uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(wndparent), uintptr(menu), uintptr(instance), uintptr(param))
	hwnd = syscall.Handle(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DefWindowProc(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam), 0, 0)
	lresult = uintptr(r0)
	return
}

func DestroyWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procDestroyWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func PostQuitMessage(exitcode int32) {
	syscall.Syscall(procPostQuitMessage.Addr(), 1, uintptr(exitcode), 0, 0)
	return
}

func ShowWindow(hwnd syscall.Handle, cmdshow int32) (wasvisible bool) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(hwnd), uintptr(cmdshow), 0)
	wasvisible = bool(r0 != 0)
	return
}

func UpdateWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetMessage(msg *Msg, hwnd syscall.Handle, MsgFilterMin uint32, MsgFilterMax uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(MsgFilterMin), uintptr(MsgFilterMax), 0, 0)
	ret = int32(r0)
	if ret == -1 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func TranslateMessage(msg *Msg) (done bool) {
	r0, _, _ := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	done = bool(r0 != 0)
	return
}

func DispatchMessage(msg *Msg) (ret int32) {
	r0, _, _ := syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	ret = int32(r0)
	return
}

func LoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(iconname)), 0)
	icon = syscall.Handle(r0)
	if icon == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(cursorname)), 0)
	cursor = syscall.Handle(r0)
	if cursor == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetCursor(cursor syscall.Handle) (precursor syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procSetCursor.Addr(), 1, uintptr(cursor), 0, 0)
	precursor = syscall.Handle(r0)
	if precursor == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SendMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) {
	r0, _, _ := syscall.Syscall6(procSendMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam), 0, 0)
	lresult = uintptr(r0)
	return
}

func PostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procPostMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}


